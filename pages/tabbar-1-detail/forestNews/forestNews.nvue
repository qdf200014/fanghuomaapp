<template>
	<!-- 写护林员日报 -->
	<view style="background-color: #F4F5FB;" class="flex flex-column flex-1 w-100">
		<uni-nav-bar left-icon="back" title="日报" :statusBar="true">
			<view class="flex flex-1 justify-end" slot="right" @click="rightText">
				<text style="color: #F75252;">保存</text>
			</view>
		</uni-nav-bar>
		<list class="flex flex-1 flex-column w-100">
			<cell>
				<view style="width: 750rpx;height: 56rpx;background-color: #F4F5FB;"
					class="flex flex-row pr-3  align-center justify-between pl-3">
					<text class="timebao">您的日报将会被上级人员查看请认真填写哦！</text>
					<text class="timebao">实时保存</text>
				</view>
				<view style="background-color: #FFFFFF;padding-left: 30rpx;padding-right: 30rpx;padding-top: 32rpx;">
					<text class="questname">{{mouldContent[0].label}}</text>
					<radio-group @change="radioChange" style="display: flex;flex-direction: row;" class="align-center"
						:style="(value==1) ? '' :'padding-bottom: 32rpx;'">
						<label class="uni-list-cell uni-list-cell-pd" v-for="(item, index) in mouldContent[0].option"
							:key="item.value" style="display: flex;flex-direction: row;margin-left: 64rpx;">
							<view>
								<radio :value="item.value" style="transform:scale(0.9)" />
							</view>
							<view
								style="display: flex;flex-direction: column;align-items: center;height: 50rpx;justify-content: center;">
								<text class="singleName">{{item.text}}</text>
							</view>
						</label>
					</radio-group>
					<view v-if="value==1">
						<input type="text" value="" placeholder="请输入原因"
							style="background-color: #F4F5FB;width: 690rpx;height: 88rpx;margin-top: 24rpx;margin-bottom: 32rpx;padding-left: 32rpx;font-size: 32rpx;padding-right: 32rpx;"
							@input="oneInput" confirm-hold="false" />
					</view>
				</view>
				<view style="background-color: #FFFFFF;padding-left: 30rpx;padding-right: 30rpx;">
					<text class="questname">{{mouldContent[1].label}}</text>
					<radio-group @change="radioChange2" style="display: flex;flex-direction: row;"
						:style="(value==1) ? '' :'padding-bottom: 32rpx;'">
						<label class="uni-list-cell uni-list-cell-pd" v-for="(item, index) in mouldContent[1].option"
							:key="item.value" style="display: flex;flex-direction: row;margin-left: 64rpx;">
							<view>
								<radio :value="item.value" style="transform:scale(0.9)" />
							</view>
							<view
								style="display: flex;flex-direction: column;align-items: center;height: 50rpx;justify-content: center;">
								<text class="singleName">{{item.text}}</text>
							</view>
						</label>
					</radio-group>
					<view
						style="padding-left: 62rpx;background-color: #F4F5FB;width: 690rpx;padding-top: 32rpx;padding-bottom: 8rpx;"
						v-if="value2 == 0" :style="(value2 ==0 ) ? 'margin-bottom:32rpx' :''">
						<checkbox-group @change="checkboxChange">
							<label class="uni-list-cell uni-list-cell-pd"
								v-for="(item, index) in mouldContent[2].option" :key="item.value"
								style="display: flex;flex-direction: row;padding-bottom: 24rpx;">
								<view>
									<checkbox :value="item.value" :checked="item.checked"
										style="transform:scale(0.9)" />
								</view>
								<view
									style="display: flex;flex-direction: column;justify-content: center;align-items: center;">
									<text style="display: flex;flex-direction: row;"
										class="morename">{{item.text}}</text>
								</view>
								<view v-if="item.text=='其他（需说明原因）'">
									<input type="text" style="width: 200rpx;height: 40rpx;font-size: 32rpx;"
										class="border-bottom" @input="otherInput" confirm-hold="false" />
								</view>
							</label>
						</checkbox-group>
					</view>
				</view>
				<view style="background-color: #FFFFFF;padding-left: 30rpx;padding-right: 30rpx;">
					<text class="questname">{{mouldContent[3].label}}</text>
					<radio-group @change="radioChange1" style="display: flex;flex-direction: row;"
						:style="(value1==0) ? '':'padding-bottom:32rpx;'">
						<label class="uni-list-cell uni-list-cell-pd" v-for="(item, index) in mouldContent[3].option"
							:key="item.value" style="display: flex;flex-direction: row;margin-left: 64rpx;"
							v-if="mouldContent[3].label">
							<view>
								<radio :value="item.value" style="transform:scale(0.9)" />
							</view>
							<view
								style="display: flex;flex-direction: column;align-items: center;height: 50rpx;justify-content: center;">
								<text class="singleName">{{item.text}}</text>
							</view>
						</label>
					</radio-group>
					<view v-if="value1==0">
						<input type="text" value="" placeholder="请输入原因"
							style="background-color: #F4F5FB;width: 690rpx;height: 88rpx;margin-top: 24rpx;margin-bottom: 32rpx;padding-left: 32rpx;font-size: 32rpx;padding-right: 32rpx;"
							@input="threeInput" confirm-hold="false" />
					</view>
				</view>
				<view style="background-color: #FFFFFF;padding-left: 30rpx;padding-right: 30rpx;">
					<text class="questname">{{mouldContent[4].label}}</text>
					<textarea placeholder="请输入..."
						style="width: 690rpx;height: 323rpx;background-color: #F4F5FB;padding-top: 28rpx;padding-left: 32rpx;margin-bottom: 32rpx;font-size: 32rpx;"
						@input="moreInput" />
				</view>
				<!-- 上传图片部分 -->

				<view style="background-color: #FFFFFF;padding-left: 30rpx;" v-if="picerList!=''">
					<text class="pic_title">图片：</text>
					<view style="display: flex;flex-direction: row;flex-wrap: wrap;padding-bottom: 28rpx;">
						<view v-for="(item,index) in picerList" :key="index" class="position-relative">
							<view style="margin-right: 24rpx;margin-top: 24rpx;">
								<image :src="item" mode="aspectFill"
									style="width: 214rpx;height: 143rpx;border-radius: 15rpx;"
									@click="previewImage(index)"></image>
							</view>
							<image src="../../../static/fireIndex/delete.png" style="width: 30rpx;height: 30rpx;"
								class="pic_posit" @click="delPic(index)"></image>
						</view>
					</view>
				</view>
				<!-- 上传视频部分 -->
				<view style="background-color: #FFFFFF;padding-left: 30rpx;" v-if="playsrcList!=''">
					<text class="pic_title">视频：</text>
					<view style="display: flex;flex-direction: row;flex-wrap: wrap;padding-bottom: 28rpx;">
						<view v-for="(item , index) in playsrcList" class="position-relative">
							<view style="margin-right: 24rpx;margin-top: 24rpx;">
								<video style="width: 214rpx;height: 143rpx;border-radius: 15rpx;" class="border"
									:src="item"></video>
							</view>
							<image src="../../../static/fireIndex/delete.png" style="width: 30rpx;height: 30rpx;"
								class="prc_posit" @click="delPrc(index)"></image>
						</view>
					</view>
				</view>
				<!-- 图片和视频 -->
				<view style="background-color: #FFFFFF;padding-left: 30rpx;padding-right: 30rpx;margin-top: 14rpx;">
					<view
						style="display: flex;flex-direction: row;justify-content: space-between;height: 96rpx;align-items: center;"
						class="border-bottom-pic" @click="uploadImg">
						<text class="pic">图片</text>
						<image src="../../../static/fireIndex/newsPic.png" mode="" style="width: 40rpx;height: 39rpx;">
						</image>
					</view>
					<view
						style="display: flex;flex-direction: row;justify-content: space-between;height: 96rpx;align-items: center;"
						@click="videoChange">
						<text class="pic">视频</text>
						<image src="../../../static/fireIndex/newsPlay.png" mode="" style="width: 40rpx;height: 39rpx;">
						</image>
					</view>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	import {
		throttle
	} from "@/common/common.js";
	export default {
		data() {
			return {
				current: 0,
				picerList: [], //选择的图片列表
				playsrc: [], //选择的视频列表
				mouldContent: [], //日报模板
				value: '',
				value1: -1,
				value2: -1,
				value3: '',
				Abstract: [],
				text: '',
				text1: '',
				text2: '',
				text3: '',
				playsrcList: [],
				mouldtype: '',
			}

		},
		created() {
			// 获取日报模板
			uni.$api.dailynews.getdailymould()
				.then(res => {
					console.log(res.data.data.mouldContent);
					this.mouldContent = JSON.parse(res.data.data.mouldContent)
					this.mouldtype = res.data.data.mouldType;
				})
				.catch(err => {
					console.log(err)
				})
		},
		methods: {
			uploadImg() {
				uni.chooseImage({
					count: 9, //上传图片的数量，默认是9
					sizeType: ['original', 'compressed'], //可以指定是原图还是压缩图，默认二者都有
					sourceType: ['album'], //从相册选择
					success: (res) => {
						const tempFilePaths = res.tempFilePaths;
						this.picerList = tempFilePaths;
					}
				});
			},
			// 选择视频
			videoChange() {
				uni.chooseVideo({
					// count: 9,
					// sourceType: ['camera', 'album'],
					success: (res => {
						console.log(res.size,'视频大小')
						this.playsrc.push(res.tempFilePath);
						if (this.playsrc.length <= 3) {
							this.playsrcList = this.playsrc
						} else {
							this.playsrcList = this.playsrc.slice(0, 3);
							uni.showToast({
								title: '视频不能超过三段',
								icon: 'none'
							})
						}
					})
				});
			},
			radioChange(e) {
				this.value = e.detail.value;
			},
			radioChange1(e) {
				this.value1 = e.detail.value;
			},
			radioChange2(e) {
				this.value2 = e.detail.value;
			},
			// 点击按钮删除图片
			delPic(index) {
				uni.showModal({
					title: "提示",
					content: "是否要删除该图片",
					success: (res) => {
						if (res.confirm) {
							this.picerList.splice(index, 1)
						}
					}
				})
			},
			// 点击按钮删除视频
			delPrc(index) {
				uni.showModal({
					title: "提示",
					content: "是否要删除该视频",
					success: (res) => {
						if (res.confirm) {
							this.playsrc.splice(index, 1)
						}
					}
				})
			},
			// 点击图片进行预览
			previewImage(index) {
				uni.previewImage({
					current: index,
					urls: this.picerList,
				})
			},
			oneInput(e) {
				// 输入原因的第一个
				this.oneInput = e.detail.value;
			},
			threeInput(e) {
				// 输入原因的第三个
				this.threeInput = e.detail.value;
			},
			otherInput(e) {
				this.otherInput = e.detail.value;
			},
			checkboxChange(e) {
				this.value3 = e.detail.value; //多选的
			},
			moreInput(e) {
				this.value4 = e.detail.value; //多行文本
			},
			rightText: throttle(function(e) {
				this.mouldContent[0].value = this.value;
				this.mouldContent[0]['1'].value = this.oneInput;
				this.mouldContent[1].value = this.value2;
				this.mouldContent[2].value.push(this.value3); //多选
				this.mouldContent[3]['1'].value = this.threeInput; //责任区域内防火原因
				this.mouldContent[2]['2'].value = this.otherInput;
				this.mouldContent[3].value = this.value1; //责任防火选择按钮
				this.mouldContent[4].value = this.value4;
				if (this.mouldContent[0].value == 0) {
					this.text0 = '是'
				} else {
					this.text0 = '否'
				}
				if (this.mouldContent[1].value == 0) {
					this.text1 = '是'
				} else {
					this.text1 = '否'
				}
				if (this.mouldContent[3].value == 0) {
					this.text3 = '是'
				} else {
					this.text3 = '否'
				}
				for (let i = 0; i < this.mouldContent[2].option; i++) {
					if (this.mouldContent[i].option.value == this.value3) {
						this.text2 = this.mouldContent[i].option.text;
					}
				}
				let mould = JSON.stringify(this.mouldContent) //写完后的日报
				console.log(mould,'lalalalal')
				let Abstract = JSON.parse(mould);
				let Abstract0 = []
				Abstract0.push(Abstract[0].label + '-' + this.text0 + Abstract[1].label + '-' + this.text1 +
					Abstract[3].label + '-' + this.text3);
				console.log(Abstract0, '啦啦啦啦');
				this.Abstract = Abstract0.toString();
				uni.showLoading();


				new Promise((resolve, reject) => {
					//压缩图片
						Promise.all(this.picerList.map((item, templistIndex) => {
								return new Promise((resolve, reject) => {
									plus.zip.compressImage({ //图片压缩上传
										src: item,
										dst: "_doc/" + Date.now() + '_' +
											templistIndex + ".jpg",
										width: "750px"
									}, res => {
										resolve(res);
									}, err => {
										reject({
											index: templistIndex,
											data: err,
											message: '图片压缩失败！'
										})
									});
								})
							}))
								.then(list => {
									console.log('图片压缩');
									console.log(list);
									resolve(list)
								})
								.catch(err => {
									console.log(err);
									reject(err)
								})
					})
					// 上传压缩图片的
					.then((templist)=> {
						// 压缩完成的图片去上传
						console.log('templist', templist);
						// 上传图片
						if (templist.length) {
							return uni.$api.fileUpload.multifileupload({
									type: 1
								}, templist.map((file, index) => {
									return {
										name: JSON.stringify(index),
										uri: file.target
									}
								}))
								.then(res => {
									console.log(res, '请求的图片');

									return Promise.resolve(res.data.data)
								})
								.catch(err => {
									console.log(err, '请求图片失败')
									return Promise.reject()
								})

						} else {
							return Promise.resolve();
						}
					})
					// 压缩视频
					.then(ConverUrl=>{
						if(this.playsrc.length){
							return Promise.all(this.playsrc.map((item,templistIndex)=>{
								// 开始压缩视频
								return new Promise((resolve,reject)=>{
									plus.zip.compressVideo({
										src:item,
										quality: 'medium'
									},res=>{
										resolve({
											ConverUrl,
											videoUrl:res.tempFilePath
										})
									},err=>{
										console.log(err,'压缩失败后的视频')
									})
								})
							}))
							.then(file=>{
								return Promise.resolve(file)
							})
							.catch(err=>{
								console.log(err,'传出视频失败');
							})
						}else{
							return Promise.resolve({ConverUrl});
						}
					})
					.then(videolist=>{
						// 对是否存在图片和视频进行处理
						let videoArr = []; //压缩后的视频数组
						let coverArr = []; //压缩后的图片数组
						if(this.playsrc.length){
							let files = videolist;
							files.forEach((item)=>{
								console.log(item);
								videoArr.push(item.videoUrl);
								coverArr = item.ConverUrl;
							})
							console.log(coverArr)
						}else{
							coverArr = videolist.ConverUrl;
							console.log(coverArr)
						}
						if(videoArr.length>0){
							// 上传视频
							return uni.$api.fileUpload.multifileupload({
								type: 2
							}, videoArr.map((file, index) => {
								return {
									name: JSON.stringify(index),
									uri: 'file://'+file
								}
							}))
								.then(res => {
									let videoUpload = res.data.data;
									return Promise.resolve({
										videoUpload,
										coverArr
									})
								})
								.catch(err => {
									return Promise.reject()
								})
						}else{
							return Promise.resolve({coverArr});
						}
					})
					.then(list=>{
							uni.$api.dailynews.createdaily({
									DailyType: this.mouldtype,
									Abstract: this.Abstract,
									Content: mould,
									ConverUrl : list.coverArr,
									VideoUrl : list.videoUpload
								})
								.then(res => {
									console.log(res, '创建日报成功');
									uni.showToast({
										title: '创建日报成功',
										icon: 'none'
									});
									setTimeout(() => {
										uni.navigateBack(1)
									}, 1500)
								})
								.catch(err => {
									console.log(err, '创建日报失败')
								})
					})
					.catch(err => {
						console.log('上传日报失败！！！', err);
					})
					.finally(() => {
						uni.hideLoading();
					})
			})

		},
	
	}
</script>

<style>
	.timebao {

		font-size: 24rpx;
		font-weight: 400;
		color: #949599;
	}

	.questname {
		font-size: 32rpx;
		font-weight: 500;
		color: #333333;
		margin-bottom: 32rpx;
	}

	.morename {

		font-size: 32rpx;
		font-weight: 400;
		color: #333333;
	}

	.singleName {

		font-size: 32rpx;
		font-weight: 400;
		color: #333333;
	}

	.border-test {
		border-width: 1rpx;
		border-color: #00BCAB;
		border-style: solid;
	}

	.border-bottom {
		border-bottom-width: 1rpx;
		border-bottom-color: #000000;
		border-style: solid;
	}

	.border-bottom-pic {
		border-bottom-width: 1rpx;
		border-bottom-color: #EEEFF3;
		border-style: solid;
	}

	.logo {
		width: 40rpx;
		height: 40rpx;
	}

	.pic {

		font-size: 32rpx;
		font-weight: 400;
		color: #323234;
	}

	.pic_title {

		font-size: 28rpx;
		font-weight: 500;
		color: #333333;
	}

	.pic_posit {
		position: absolute;
		top: 10rpx;
		right: 10rpx;
	}

	.prc_posit {
		position: absolute;
		top: 10rpx;
		right: 10rpx;
	}
</style>
