<template>
    <view class="flex-column bg-dark flex-1 position-relative">
        <!-- <template v-if="sigData.isCreator && scene == 'p2p'"> -->
        <!-- 第一层；对方的画面，占满屏幕 -->
 
        <!-- <text v-if="!isAccept" class="text-white">等待用户接受邀请</text> -->
        <view class="position-absolute left-0 top-0 right-0 bottom-0 flex-1" v-for="(item, index) in players" :key="index">
            <TX-PlayView
                class="flex-1"
                :ref="'remoteUser' + item.userId"
                :remoteUserId="item.userId"
                :remoteSubStreamUserId="item.remoteSubStreamUserId"
                remoteSubStreamModel="1"
            ></TX-PlayView>
        </view>
 
        <!-- 第二层：自己的画面，未接通时，占满画面，接通后缩小。 -->
        <view class="flex justify-end" :class="isAccept ? '_video-mini-wrapper' : showVideoStyle">
            <TX-PlayView
                :class="isAccept ? '_video-mini-wrapper' : showVideoStyle"
                ref="maxTxPlayView"
                :appId="appId"
                :appKey="appKey"
                :roomId="roomId"
                :userId="userName"
                enableLocalPreview="true"
                enableLocalAudio="true"
                @statechange="onPush"
            ></TX-PlayView>
        </view>
 
        <!-- </template> -->
 
        <!-- 第三层：来电界面，等待用户选择接受还是拒绝 -->
        <template v-if="!sigData.isCreator && !isAccept">
            <image class="flex-1 position-absolute" src="/static/call/bg@2x.png" mode="scaleToFill"></image>
 
            <view class="flex-1 left-0 top-0 right-0 bottom-0  position-absolute flex-column align-center justify-center">
                <image :src="sigData.avatar || 'http://yx-web.nos.netease.com/webdoc/h5/im/default-icon.png'" mode="aspectFill" style="width: 218rpx;height: 218rpx;border-radius:20rpx;"></image>
                <text class="_call-user-name mt-5">{{ sigData.nickName }}</text>
                <text class="_call-tip-text mt-3">邀请你加入聊天...</text>
            </view>
        </template>
 
        <!-- 第四层：界面上的提示元素，在最顶层不会被覆盖 -->
        <!-- 没有接通，并且是创建者 -->
        <view v-if="!isAccept && sigData.isCreator" class="position-absolute left-0 right-0 flex justify-center align-center" style="top: 120rpx;">
            <text class="text-white font-weight-normal-2 font-lg">等待用户接受邀请</text>
        </view>
 
        <view v-if="isAccept" class="position-absolute left-0 right-0 flex justify-center align-center" style="top: 120rpx;">
            <text class="text-white font-weight-normal-2 font-lg">视频通话</text>
        </view>
 
        <view v-if="isAccept" class="position-fixed left-0 right-0 flex justify-center align-center" style="top: 190rpx">
            <text class="text-white font-weight-normal-2 font-md">{{ videoTimeText }}</text>
        </view>
        
        
        <!-- 底部按钮 -->
        <view class="position-absolute left-0 right-0 flex align-center justify-around w-100" style="bottom: 80rpx;">
            <view v-if="isAccept" class="flex-column align-center">
                <image @tap="muteLocalAudio" :src="isNoVoice ? '/static/call/jingyin-active@2x.png' : '/static/call/jingyin@2x.png'" mode="aspectFill" style="width: 135rpx;height: 135rpx;"></image>
                <text class="font-26 text-white mt-2">静音</text>
            </view>
            
            <view class="flex-column align-center">
                <image @click="back" style="width: 136rpx;height: 136rpx;" src="/static/call/guaduan@2x.png" :class="!sigData.isCreator && !isAccept ? 'mr-5' : '' "></image>
                <text v-if="isAccept" class="font-26 text-white mt-2">取消</text>
            </view>
            
            <image v-if="!sigData.isCreator && !isAccept" @click="acceptCall" style="width: 136rpx;height: 136rpx;" src="/static/call/jietong@2x.png" class="ml-5"></image>
            
            <view v-if="isAccept" class="flex-column align-center">
                <image @tap="setAudioRoute" :src="isNoOutVoice ? '/static/call/mianti-active@2x.png' : '/static/call/mianti@2x.png'" mode="aspectFill" style="width: 135rpx;height: 135rpx;"></image>
                <text class="font-26 text-white mt-2">免提</text>
            </view>
            
        </view>
        
    </view>
</template>
 
<script>
import { appId, appKey } from '@/common/rtc/app.js';
import { mapState, mapMutations } from 'vuex';
import { beginSetIntervalLoginOut, stopSetIntervalLoginOut, createVibrateLong, clearVibrate } from '@/common/function/cronJob.js'
const trtcCloud = uni.requireNativePlugin('TX-TRTCCloud');
const innerAudioContext = uni.createInnerAudioContext();
innerAudioContext.autoplay = true;
innerAudioContext.loop = true;
let sendNoticCodeTimeOut = null;
// import { Pushsendsms } from '@/common/request/api/index.js'
 
import useDayjs from '@/common/NIM/useDayjs.js'
import ScreenLock from '@/utils/keepScreenOn.js';
let videoTimeInterval = null
 
export default {
    data() {
        return {
            windowHeight: 0,
            mainVideo: 456,
            localTool: false,
            roomId: 0,
            userName: '',
            players: [],
            appId: appId,
            appKey: appKey,
            audioRoute: 0,
            localVideo: false,
            farVideo: false,
            farAllVideo: false,
            farAuido: false,
            allAuido: false,
            role: 20,
 
            // 通话时长计时器
            videoTime: 0,
            // 当前的主会话视图
            mainViewIndex: 0,
            scene: '',
            sigData: null,
            // 信令中的自定义字段
            attachExt: null,
            // 是否静音
            isNoVoice:false,
            // 是否免提
            isNoOutVoice:false
        };
    },
    computed: {
        ...mapState({
            isAccept: state => {
                if (state.call.isAccept) {
                    innerAudioContext.stop(() => {
                        console.log('停止播放');
                    });
                    clearVibrate()
                }
                return state.call.isAccept;
            }
        }),
        showVideoStyle() {
            if (this.sigData.isCreator) {
                return 'flex-1 _custom-opacity-2'
            }else {
                return '_custom-opacity-1'
            }
        },
        videoTimeText() {
            return useDayjs.foramtCallTime(this.videoTime)
        },
        nimUserInfo() {
            return this.$store.getters['initNim/nimUserInfo']
        },
        userUID() {
            return this.$store.getters['initNim/userUID']
        }
    },
    watch: {
        isAccept(n) {
            if (n) {
                this.join();
                videoTimeInterval = setInterval(() => {
                    // console.log('时间累加', this.videoTime);
                    this.videoTime++;
                }, 1000);
            }
        }
    },
    onLoad(event) {
        getApp().globalData.signalingEventType = ''
        stopSetIntervalLoginOut()
        getApp().globalData.isCall = true;
        ScreenLock.keepOn();
        console.log('页面接受的参数', decodeURIComponent(event.sigData));
        this.sigData = JSON.parse(decodeURIComponent(event.sigData));
        this.sigData.isCreator = event.isCreator == 1 ? true : false
        console.log(this.sigData);
        
        this.roomId = Number(this.sigData.roomId);
        console.log('当前房间号为：：：：：：：：：', this.roomId);
        this.userName = this.nimUserInfo.account;
        
        this.windowHeight = 667;
 
        if (!this.isAccept) {
            innerAudioContext.src = '/static/MP3/shipin.mp3';
            innerAudioContext.play()
            if (!this.sigData.isCreator) {
                // 建立震动
                createVibrateLong()
            }
        }
        
        if (this.sigData.isCreator) {
            sendNoticCodeTimeOut = setTimeout(() => {
                if (!this.isAccept) {
                    this.api_Pushsendsms()
                }
            }, 30000)
        }
        
    },
 
    onReady() {
        // setTimeout(()=>{
        //     // this.exitRoom();
        //     this.join();
        // }, 1000);
        uni.hideKeyboard();
    },
    beforeDestroy() {
        this.stopLocalAudio()
        this.stopAllRemoteView()
        this.$refs.maxTxPlayView.leaveRoom();
    },
    onUnload() {
        getApp().globalData.signalingEventType = 'CONTROL'
        clearInterval(videoTimeInterval);
        this.callbreak()
        this.updateAccept({ flag: false });
        innerAudioContext.destroy();
        getApp().globalData.isCall = false;
        ScreenLock.keepOff();
        beginSetIntervalLoginOut()
        clearVibrate()
        clearTimeout(sendNoticCodeTimeOut)
    },
    onResize() {
        // #ifdef APP-PLUS-NVUE
        this.resizeWinHeight();
        // #endif
    },
 
    onNavigationBarButtonTap() {
        uni.navigateBack({
            delta: 1,
            animationType: 'pop-out',
            animationDuration: 200
        });
    },
 
    onBackPress() {
        this.stopLocalAudio()
        this.stopAllRemoteView()
        this.$refs.maxTxPlayView.leaveRoom();
    },
 
    methods: {
        ...mapMutations({
            'updateAccept':'call/updateAccept'
        }),
        api_Pushsendsms() {
            // Pushsendsms({
            //     type : 3,
            //     ids: this.sigData.to
            // }).then(res => {
            //     console.log(res);
            // }).catch(err => {
            //     console.log(err);
            // })
        },
        back() {
            getApp().globalData.signalingEventType = 'CONTROL'
            uni.navigateBack()
        },
        acceptCall() {
            // 接收人加入视频单聊的信令
            let option = {
                channelId: this.sigData.channelId,
                account: this.sigData.from,
                requestId: this.roomId,
                autoJoin: true
            };
            this.$store.state.initNim.nim.signalingAccept(option).then(res => {
                console.log(res);
                this.updateAccept({ flag: true });
            });
            
        },
        selectUser(index) {
            console.log('选择用户', index);
            this.mainViewIndex = index;
        },
        sendTipsMsg(tip, to, isHandleCreator = true) {
            
            if (isHandleCreator && !this.sigData.isCreator) {
                return ; 
            }
            
            this.$store.dispatch('initNim/nimSendTipMsg', {
                scene: 'p2p',
                to: to,
                tip: tip
            }).then(res => {
                // console.log('aaaaaaaaaaaaaaaaaaaaa', res);
            })
        },
        callbreak() {
                // 已经连接通话的情况下取消，将关闭频道
                if (this.isAccept) {
                    var param = {
                        channelId: this.sigData.channelId,
                    };
                    
                    
                    this.$store.state.initNim.nim.signalingClose(param).then(res => {
                        console.log(res);
                        
                        let tipMsg = {
                            type: 'endCallp2p',
                            data: {
                                time: this.videoTimeText,
                                callType: 'video'
                            }
                        }
                        
                        this.sendTipsMsg(JSON.stringify(tipMsg), this.sigData.isCreator ? this.sigData.to : this.sigData.from, false)
                        
                    });
                    
                    
                    // uni.navigateBack();
 
                    // console.log('通知结束会话事件');
                    return;
                }
 
                // 创建者，发送取消单聊通话信令
                if (this.sigData.isCreator) {
                    let option = {
                        channelId: this.sigData.channelId,
                        account: this.sigData.to,
                        requestId: this.roomId
                    };
                    console.log('参数错误', option);
                    this.$store.state.initNim.nim.signalingCancel(option).then(res => {
                        this.$store.state.initNim.nim.signalingClose(option).then(res => {
                            console.log('signalingClose',res);
                            // this.$store.dispatch('sendMsg', {
                            //     type: 'text',
                            //     scene: 'p2p',
                            //     to: this.sigData.to,
                            //     text: "视频聊天已取消",
                            //     // 只有设置了业务已读，才会触发已读回执通知
                            //     needMsgReceipt: true
                            // });
                            
                            let tipMsg = {
                                type: 'cancelCallp2p',
                                data: {
                                    callType: 'video'
                                }
                            }
                            
                            this.sendTipsMsg(JSON.stringify(tipMsg), this.sigData.to)
                            
                        })
                    }).catch(err => {
                        console.log('11111', err);
                    });
                    
                    // uni.navigateBack();
                    return;
                }
                
                // 对方取消挂断，不发送拒绝消息
                if (getApp().globalData.signalingEventType == 'CANCEL_INVITE') {
                    getApp().globalData.signalingEventType = ''
                    return ;
                }
                
                // 接收人，发送取消单聊通话的信令
                let option = {
                    channelId: this.sigData.channelId,
                    account: this.sigData.from,
                    requestId: this.roomId
                };
                this.$store.state.initNim.nim.signalingReject(option).then(res => {
                    console.log('signalingReject', res);
                    // this.$store.dispatch('sendMsg', {
                    //     type: 'text',
                    //     scene: 'p2p',
                    //     to: this.sigData.from,
                    //     text: "视频聊天已拒绝",
                    //     // 只有设置了业务已读，才会触发已读回执通知
                    //     needMsgReceipt: true
                    // });
                    
                    let tipMsg = {
                        type: 'rejectCallp2p',
                        data: {
                            callType: 'video'
                        }
                    }
                    
                    this.sendTipsMsg(JSON.stringify(tipMsg), this.sigData.from, false)
                    
                });
            
            // uni.navigateBack();
        },
        join() {
            //主要步骤如下：
            //1. 开启本地视频的预览画面，并开启声音
            this.$refs.maxTxPlayView.startLocalPreview();
            this.$refs.maxTxPlayView.joinRoom();
            setTimeout(() => {
                this.startLocalAudio(); //话筒
                this.setAudioRoute(1); //听筒
            }, 500)
        },
        exit() {
            this.$refs.maxTxPlayView.leaveRoom();
            this.$refs.maxTxPlayView.stopLocalPreview();
            uni.navigateBack();
        },
        addSelf() {
            this.players.push({
                userId: this.userName
            });
        },
        removeSelf() {
            let index = -1;
            for (let i = 0; i < this.players.length; i++) {
                this.players[i].userId == this.userName ? index == i : '';
            }
            console.log('index', this.players[0].userId, this.userName, this.players[i].userId == this.userName);
            index == -1 ? '' : this.players.splice(index, 1);
        },
        onPush(e) {
            let result = e.detail;
            console.log('onPush-result:', result);
            switch (result.type) {
                case 'onFirstVideoFrame':
                    console.log('onFirstVideoFrame');
                    break;
 
                case 'onUserVideoAvailable':
                    break;
 
                case 'onUserEnter':
                    if (result.userId) this.addPlayer(result.userId);
                    break;
                case 'onUserSubStreamAvailable':
                    if (result.userId) this.addSubStreamPlayer(result.userId);
 
                case 'onUserExit':
                    if (result.userId) this.removePlayer(result.userId);
                    break;
            }
        },
 
        addPlayer(userId) {
            this.players.push({
                userId: userId
            });
        },
 
        addSubStreamPlayer(userId) {
            this.players.push({
                remoteSubStreamUserId: userId
            });
        },
 
        removePlayer(userId) {
            for (let i = 0; i < this.players.length; i++) {
                let d = this.players[i];
                if (d.userId === userId) {
                    this.players.splice(i, 1);
                    break;
                }
            }
        },
 
        resizeWinHeight() {
            uni.getSystemInfo({
                success: res => {
                    this.windowHeight = res.windowHeight;
                }
            });
        },
        openPopup(tool) {
            this.localTool = !this.localTool;
            this.$refs[tool].open();
        },
        switchMainVideo(id) {
            this.mainVideo = id;
        },
 
        // 推流组件TX-PlayView start
 
        startLocalPreview() {
            // 开启本地视频的预览画面
            this.$refs.maxTxPlayView.startLocalPreview();
        },
        stopPublishing() {
            // 关闭本地预览
            this.$refs.maxTxPlayView.stopPublishing();
        },
        startRemoteViewSelf() {
            // 开始显示远端视频画面
            /**
             * 在收到 SDK 的 onUserVideoAvailable(userId, true) 通知时，可以获知该远程用户开启了视频，
             * 此后调用 startRemoteView(userId) 接口加载该用户的远程画面时，可以用 loading 动画优化加载过程中的等待体验。
             * 待该用户的首帧画面开始显示时，您会收到 onFirstVideoFrame(userId) 事件回调。
             * */
            this.$refs.maxTxPlayView.startRemoteView(this.userName);
        },
        stopRemoteView() {
            // 停止显示远端视频画面
            // 调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。
            this.$refs.maxTxPlayView.stopRemoteView(this.userName);
        },
        leaveRoom() {
            // 离开房间
            this.$refs.maxTxPlayView.leaveRoom();
            this.players = [];
        },
        exitRoom() {
            // 离开房间
            trtcCloud.exitRoom();
            this.players = [];
        },
        // 推流组件TX-PlayView end
 
        // 推流组件TX-TXTRTCCloud end
        enterRoom() {
            this.join();
        },
        muteLocalVideo() {
            // 是否屏蔽自己的视频画面
            // 当屏蔽本地视频后，房间里的其它成员将会收到 onUserVideoAvailable 回调通知
            this.localVideo = !this.localVideo;
            console.log('this.localVideo', this.localVideo);
            trtcCloud.muteLocalVideo(this.localVideo);
        },
        stopAllRemoteView() {
            // 停止显示所有远端视频画面
            // 停止显示所有远端视频画面，同时不再拉取该远端用户的视频数据流
            trtcCloud.stopAllRemoteView();
        },
        startRemoteView() {
            // 开始显示远端指定用户
            trtcCloud.startRemoteView(this.players[0].userId || 0);
        },
        muteRemoteVideoStream() {
            // 暂停接收指定的远端视频流
            // 该接口仅停止接收远程用户的视频流，但并不释放显示资源，所以视频画面会冻屏在 mute 前的最后一帧
            this.farVideo = !this.farVideo;
            console.log('muteRemoteVideoStream', this.farVideo, this.players[0].userId);
            trtcCloud.muteRemoteVideoStream(this.players[0].userId || 0, this.farVideo);
        },
        muteAllRemoteVideoStreams() {
            // 停止接收所有远端视频流
            this.farAllVideo = !this.farAllVideo;
            trtcCloud.muteAllRemoteVideoStreams(this.farAllVideo);
        },
        startLocalAudio() {
            // 开启本地音频的采集和上行(默认不开启)
            trtcCloud.startLocalAudio();
            trtcCloud.muteLocalAudio(false);
        },
        stopLocalAudio() {
            // 关闭本地音频的采集和上行
            trtcCloud.stopLocalAudio();
        },
        muteLocalAudio() {
            this.isNoVoice = !this.isNoVoice
            if( this.isNoVoice ){
                // this.stopLocalAudio()
                trtcCloud.muteLocalAudio(true);
                return ;
            } else {
                // this.startLocalAudio()
                trtcCloud.muteLocalAudio(false);
                return ;
            }
            
            // 静音
            // 当静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。 与 stopLocalAudio 不同之处在于，muteLocalAudio 并不会停止发送音视频数据，而是会继续发送码率极低的静音包。 在对录制质量要求很高的场景中，选择 muteLocalAudio 是更好的选择，能录制出兼容性更好的 MP4 文件。 这是由于 MP4 等视频文件格式，对于音频的连续性是要求很高的，简单粗暴地 stopLocalAudio 会导致录制出的 MP4 不易播放。
            trtcCloud.muteLocalAudio();
        },
        muteRemoteAudio() {
            // 静音掉某一个用户的声音，同时不再拉取该远端用户的音频数据流
            this.farAuido = !this.farAuido;
            trtcCloud.muteRemoteAudio(this.players[0].userId || 0, this.farAuido);
        },
        muteAllRemoteAudio() {
            // 静音掉所有用户的声音，同时不再拉取该远端用户的音频数据流
            this.allAuido = !this.allAuido;
            trtcCloud.muteAllRemoteAudio(this.allAuido);
        },
        destroySharedIntance() {
            // 销毁 trtcCloud 释放 TRTCCloud 对象并清理资源
            trtcCloud.destroySharedIntance();
        },
        switchRole() {
            // 转换角色
            /**
             * 20,主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。
             * 21,观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。
             *
             * 另，50是服务器限制，手机极限约15路，实际使用中7路以上路的手机已经耗电+发烫到不能再碰
             * */
            this.role = this.role == 20 ? 21 : 20;
            trtcCloud.switchRole(this.role);
        },
        switchCamera() {
            //切换摄像头
            trtcCloud.switchCamera();
        },
        setAudioRoute(type) {
            this.isNoOutVoice = this.audioRoute ? true : false
            //切换音频路由
            this.audioRoute = this.audioRoute ? 0 : 1;
            // this.audioRoute = type == 1 ? 1 : this.audioRoute;
            trtcCloud.setAudioRoute(this.audioRoute);
        },
        // 推流组件TX-TXTRTCCloud end
 
        roomCallback(event) {
            console.log('roomCallback-----', event);
        }
    }
};
</script>
 
<style lang="scss">
.page {
    flex: 1;
    width: 750rpx;
    background-color: #271506;
}
.page-title {
    width: 750rpx;
    height: 80rpx;
    line-height: 80rpx;
    color: #fff;
    font-size: 28rpx;
    text-align: center;
}
 
.liveroom {
    flex-direction: row;
    flex-wrap: wrap;
    width: 750rpx;
}
$cel-width: 0.5 * 750rpx;
.liveroom-cel {
    width: $cel-width;
    height: 1.382 * $cel-width + 40rpx;
    padding: 20rpx;
}
.liveroom-trtc {
    width: $cel-width - 40rpx;
    height: 1.382 * $cel-width - 40rpx;
    background-color: #444;
}
.main-trtc {
    width: 750rpx;
    height: 750rpx;
}
 
.liveroom-cel-name {
    width: $cel-width - 40rpx;
    height: 40rpx;
    line-height: 40rpx;
    text-align: center;
    color: #999;
    font-size: 24rpx;
}
.tools-box {
    width: 750rpx;
    height: 750rpx;
    background-color: rgba(255, 255, 255, 0.3);
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    padding: 30rpx;
    position: fixed;
    bottom: 0;
    left: 0;
}
.tools-item {
    width: 100rpx;
    height: 100rpx;
    border-radius: 50rpx;
    background-color: #ffffff;
    justify-content: center;
    margin-top: 20rpx;
}
.tools-item-text {
    font-size: 20rpx;
    text-align: center;
}
 
._custom-main-view {
    // position: absolute;
    width: 750rpx;
    height: 700rpx;
    z-index: 10;
}
._custom-mini-view {
    width: 120rpx;
    height: 120rpx;
    z-index: 9999;
    // margin-top: -150px;
}
 
._call-user-name {
    color: #ffffff;
    font-size: 50rpx;
    font-weight: 500;
}
._call-tip-text {
    color: #a4a4a4;
    font-size: 30rpx;
    font-weight: 500;
}
._video-mini-wrapper {
    position: absolute;
    top: 100rpx;
    right: 20rpx;
    width: 280rpx;
    height: 420rpx;
    background-color: rgba(238, 238, 238, 0);
    opacity: 1!important;
}
._custom-opacity-1{
    width: 0;
    height: 0;
}
</style>